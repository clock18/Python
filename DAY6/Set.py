# Set : 집합 형태의 자료 구조 ( 집합 자료형 )
# 요소 값을 key로서 인식하기 때문에 중복허용이 안됨

# set 생성
s1 = {1,2,3,4,5}    # 딕셔너리는 키와 벨류 값을 ':' 으로 구분.
s2 = set([3,4,7,8,9])  # set은 {}안에 바로 값을 입력해야함. {} 이 상태로 두면 딕셔너리를 의미
s3 = set()

print(s1)
print(s2)


# set의 특징
# 1) 중복을 허용하지 않음 : unhashable type
# 2) 입력 순서와 출력되는 순서가 다를 수 있음

s4 = {1,3,2,2,5,4,3}    # 중복제거, 자동 오름차순 정렬
print(s4)


# 3) 인덱스 사용 불가 : 이미 포함되어 있는 요소를 변경할 수 없음
#   ex. print(s4[0]) 을 입력하면 에러가 뜸. 인덱스를 사용할 수 없기 떄문


# 4) 요소 추가 가능
s4.add(10)      # a.add() : 값 하나를 추가하는 것
print(s4)

s4.update([6,7])       # a.update([]) : 값 여러개를 추가하는 것
print(s4)


# 5) 집합 안에 변경 가능한 항목 포함 불가능
#       ex. 리스트 포함 불가, 튜플 포함 가능

#s5 = {1, 2, [3, 4]}     # 리스트는 Mutable하기 때문에 print했을 때 에러가 뜸.
# print(s5)

s6 = {1, 2, (3, 4)}
print(s6)


# 6) 요소 삭제 가능

# s6.remove(1)
# print(s6)
#
# s6.discard(1)
# print(s6)

# s6.remove(10)   # 요소 값이 없는 경우 에러
s6.discard(10)  # 요소 값이 없는 경우 에러 발생 x
                # 따라서 에러를 띄우지 않고 다음 과정으로 넘어가려면 discard를 씀


# 요소 전체를 지움 > 빈 집합
s6.clear()  # 집합은 남겨두고 요소들만 지우는 것
print(s6)   # 따라서 빈 집합만 출력됨

# del s6      # 집합 자체를 싹 다 지워버리는 것
# print(s6)   # 따라서 오류가 나옴
